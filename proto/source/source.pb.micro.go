// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/source/source.proto

package source_lms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Source service

func NewSourceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Source service

type SourceService interface {
	GetBySourceTag(ctx context.Context, in *SourceRequest, opts ...client.CallOption) (*SourceResponse, error)
}

type sourceService struct {
	c    client.Client
	name string
}

func NewSourceService(name string, c client.Client) SourceService {
	return &sourceService{
		c:    c,
		name: name,
	}
}

func (c *sourceService) GetBySourceTag(ctx context.Context, in *SourceRequest, opts ...client.CallOption) (*SourceResponse, error) {
	req := c.c.NewRequest(c.name, "Source.GetBySourceTag", in)
	out := new(SourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Source service

type SourceHandler interface {
	GetBySourceTag(context.Context, *SourceRequest, *SourceResponse) error
}

func RegisterSourceHandler(s server.Server, hdlr SourceHandler, opts ...server.HandlerOption) error {
	type source interface {
		GetBySourceTag(ctx context.Context, in *SourceRequest, out *SourceResponse) error
	}
	type Source struct {
		source
	}
	h := &sourceHandler{hdlr}
	return s.Handle(s.NewHandler(&Source{h}, opts...))
}

type sourceHandler struct {
	SourceHandler
}

func (h *sourceHandler) GetBySourceTag(ctx context.Context, in *SourceRequest, out *SourceResponse) error {
	return h.SourceHandler.GetBySourceTag(ctx, in, out)
}
